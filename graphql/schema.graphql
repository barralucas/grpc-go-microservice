scalar Time

type Account {
    id: String!
    name: String!
    orders: [Order!]!
}

type Product {
    id: String!
    name: String!
    description: String!
    price: Float!
}

type Order {
    id: String!
    createdAt: Time!
    totalPrice: Float!
    products: [OrderedProduct!]!
}

type OrderedProduct {
    id: String!
    description: String!
    quantity: Int!
    price: Float!
    name: String!
}

input PaginationInput {
    skip: Int
    take: Int
}

input AccountInput {
    name: String!
}

input ProductInput {
    name: String!
    description: String!
    price: Float!
}

input OrderedProductInput {
    id: String!
    quantity: Int!
}

input OrderInput {
    accountId: String!
    products: [OrderedProductInput!]!
}

type Mutation {
    createAccount(input: AccountInput!): Account!
    createProduct(input: ProductInput!): Product!
    createOrder(input: OrderInput!): Order!
}

type Query {
    accounts(input: PaginationInput): [Account!]!
    products(input: PaginationInput): [Product!]!
    orders(input: PaginationInput): [Order!]!
}